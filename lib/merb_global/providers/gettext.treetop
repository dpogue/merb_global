module Merb
  module Global
    module Providers
      grammar Gettext
        rule po_file
	  entry* {
	    def to_hash
              hash = {}
	      elements.each {|entry| hash.merge! entry.to_hash}
	      hash
	    end
	    def visit
	      elements.each {|elem| elem.visit}
	    end
	  }
	end

        rule entry
	  whitespaces*
	  (
            "msgid" whitespaces msgid:strings
	    "msgstr" whitespaces msgstr:strings {
              def to_hash
	        {msgid.to_s => msgstr.to_s}
	      end
	      def visit
	        yield msgid.to_s, nil, msgstr.to_s, nil unless msgid.to_s == ""
	      end
	    }
	    /
	    "msgid" whitespaces msgid:strings
	    "msgid_plural" whitespaces msgid_plural:strings
	    msgstrs:("msgstr[" number:[0-9]+ "]" whitespaces strings)+ {
	      def to_hash
	        hash = {:plural => msgid_plural.to_s}
	        msgstrs.elements.each do |msgstr|
		  hash[msgstr.number.text_value.to_i] = msgstr.strings.to_s
		end
	        {msgid.to_s => hash}
	      end
	      def visit lang
	        msgstrs.elements.each do |msgstr|
		  yield msgid.to_s, msgid_plural.to_s,
                        msgstr.to_s, msgstr.number.text_value.to_i
		end
	      end
	    }
	  )
	  {
	    def to_hash
	      elements.last.to_hash
	    end
	  }
	end

	rule strings
	  (string whitespaces?)+ {
	    def to_s
	      elements.collect {|element| element.string.to_s}.join
	    end
	  }
	end

	rule string
	  '"' content:(!'"' ('\"' / .))* '"' {
	    def to_s
	      # Quick'n'dirty replacement
	      content.text_value.split('\n').join("\n").split('\"').join('"')
	    end
	  }
	end

        rule whitespaces
          (" " / "\t" / "\n" / ('#' (!"\n" .)* "\n") )+
        end
      end
    end
  end
end
module Merb
  module Global
    module Providers
      grammar Gettext
        rule po_file
	  entry* {
	    def to_hash
              hash = {}
	      elements.each {|entry| hash.merge! entry.to_hash}
	      hash
	    end
	  }
	end

        rule entry
	  whitespaces*
	  msg:(
	    msg_single {
	      def to_hash
	        msg_single.to_hash
	      end
	    }
	    /
	    msg_plural {
	      def to_hash
	        msg_plural.to_hash
              end
	    }
	  ) {
	    def to_hash
	      msg.to_hash
	    end
	  }
	end

	rule whitespaces
	  (" " / "\t" / "\n" / ('#' (!"\n" .)* "\n") )+
	end

	rule msg_single
	  "msgid" whitespaces msgid:strings
	  "msgstr" whitespaces msgstr:strings {
            def to_hash
	      {msgid.to_s => msgstr.to_s}
	    end
	  }
	end

	rule msg_plural
	  "msgid" whitespaces msgid:strings
	  "msgid_plural" whitespaces msgid_plural:strings
	  msgstrs:( msg_plural_str )+ {
	    def to_hash
	      msgstr_hash = {:plural => msgid_plural.to_s}
	      msgstrs.each {|msgstr| msgstr_hash.merge! msgstr.to_hash}
	      {msgid.to_s => msgstr_hash}
	    end
	  }
	end

	rule msg_plural_str
	  "msgstr[" number:[0-9]+ "]" whitespaces strings {
	    def to_hash
	      {number.text_value.to_i => strings.to_s}
	    end
	  }
	end

	rule strings
	  (string whitespaces?)+ {
	    def to_s
	      elements.collect {|element| element.string.to_s}.join
	    end
	  }
	end

	rule string
	  '"' content:(!'"' ('\"' / .))* '"' {
	    def to_s
	      content.text_value
	    end
	  }
	end
      end
    end
  end
end